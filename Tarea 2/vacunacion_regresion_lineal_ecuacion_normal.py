# -*- coding: utf-8 -*-
"""Vacunacion_Regresion_Lineal_Ecuacion_Normal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14JOnsK_oZk5AXMtFQHuy_Oy4tx_LguX3
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import seaborn as sns
sns.set(style='whitegrid')
import pandas as pd

Selected_country_2 = 'Colombia'
df2 = pd.read_csv('country_vaccinations.csv',header=0)
df2 = df2[df2['country']==Selected_country_2]
df2.index = pd.to_datetime(df2['date'])
fig,ax=plt.subplots(figsize=(10,5))
ax1 = ax.twinx()
ax1.plot(df2.index,df2['daily_vaccinations'],'r',label='Vaccinations')
plt.show()
vaccination.describe()
eti = df2['daily_vaccinations'].values
eti = np.delete(eti,0)
#print(eti)
car = df2['date'].values
eti = np.delete(eti,0)
car = np.delete(car,0)
#print(car)
#print(type(car))
#plt.scatter(car,eti)
#plt.show()
#print(car.shape)
#print(eti.shape)

"""# Iniciemos con  la regresi√≥n lineal univariada"""

x0 = np.ones(196)
print(x0.shape)
dias = ([])
for i in range (1,197):
  dias.append(i)
dia = np.array(dias)
#print(dias)
print(type(dia))
print(x0.shape)
X = np.matrix([x0,dia]).T
Y = np.matrix([eti]).T
print("shape x0",x0.shape,"shape x1",car.shape,"shape X",X.shape,"shape Y",Y.shape)
print(X)
print(Y)

"""Probamos primero con una hiptotesis linal de la forma y = o0*x0+o1*x1

"""

Theta = np.linalg.inv(X.T*X)*(X.T)*Y
print(Theta)
plt.plot(dia,eti, 'bo')
plt.plot(dia,Theta[0,0]+Theta[1,0]*dia)
plt.title("Final")
plt.show()

y_est = x0*Theta[0,0]+dia*Theta[1,0]
#print(y_est)
#print(y_est.shape)
varianza = eti.var()
print("Varianza = ",varianza)
R0 = np.sum( np.power( ( y_est-varianza ) ,2) )
R1 = np.sum( np.power( ( eti-varianza ) ,2) )
R2 = R0/R1
print("R cuadrado = ",R2)

y_est=1*Theta[0,0]+198*Theta[1,0]
print("El numero de vacunas que se espera se apliquen el 03/09/2021 son ", y_est)

"""Ahora probamos con una polinomial de segundo orden """

Z1 = dia*dia
X = np.matrix([x0,dia,Z1]).T
Y = np.matrix([eti]).T
Theta = np.linalg.inv(X.T*X)*(X.T)*Y
print(Theta)
plt.plot(dia,eti, 'bo')
plt.plot(dia,Theta[0,0]+Theta[1,0]*dia+Z1*Theta[2,0])
plt.title("Final")
plt.show()

y_est = x0*Theta[0,0]+dia*Theta[1,0]+Z1*Theta[2,0]
#print(y_est)
#print(y_est.shape)
varianza = eti.var()
print("Varianza = ",varianza)
R0 = np.sum( np.power( ( y_est-varianza ) ,2) )
R1 = np.sum( np.power( ( eti-varianza ) ,2) )
R2 = R0/R1
print("R cuadrado = ",R2)

y_est=1*Theta[0,0]+198*Theta[1,0]+39204*Theta[2,0]
print("El numero de vacunas que se espera se apliquen el 03/09/2021 son ", y_est)

"""Por ultimo probamos con una hipotesis polinimial de tercer orden"""

Z1 = dia*dia
Z2 = Z1*dia
X = np.matrix([x0,dia,Z1,Z2]).T
Y = np.matrix([eti]).T
Theta = np.linalg.inv(X.T*X)*(X.T)*Y
print(Theta)
plt.plot(dia,eti, 'bo')
plt.plot(dia,Theta[0,0]+Theta[1,0]*dia+Z1*Theta[2,0]+Z2*Theta[3,0])
plt.title("Final")
plt.show()

y_est = x0*Theta[0,0]+dia*Theta[1,0]+Z1*Theta[2,0]+Z2*Theta[3,0]
#print(y_est)
#print(y_est.shape)
varianza = eti.var()
print("Varianza = ",varianza)
R0 = np.sum( np.power( ( y_est-varianza ) ,2) )
R1 = np.sum( np.power( ( eti-varianza ) ,2) )
R2 = R0/R1
print("R cuadrado = ",R2)

y_est=1*Theta[0,0]+198*Theta[1,0]+39204*Theta[2,0]+7762392*Theta[3,0]
print("El numero de vacunas que se espera se apliquen el 03/09/2021 son ", y_est)